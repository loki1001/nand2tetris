// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Control unit
    Mux16(a=false, b=instruction, sel=instruction[15], out[0]=controlJGT, out[1]=controlJEQ, out[2]=controlJLT, out[3]=controlDestinationM, out[3]=writeM, out[4]=controlDestinationD, out[5]=controlDestinationA, out[6]=controlAluNo, out[7]=controlAluF, out[8]=controlAluNy, out[9]=controlAluZy, out[10]=controlAluNx, out[11]=controlAluZx, out[12]=controlAOrM, out[13]=false, out[14]=false, out[15]=controlType);
    // Feed control signals into ALU
    ALU(x=xIn, y=yIn, zx=controlAluZx, nx=controlAluNx, zy=controlAluZy, ny=controlAluNy, f=controlAluF, no=controlAluNo, out=outAlu, out=outM, zr=isZero, ng=isNegative);

    // Flags for zero or negative
    Or(a=isZero, b=isNegative, out=LTEQ);
    Not(in=LTEQ, out=isPositive);

    // Register based on type
    // Select instruction if controlType is true, else outAlu if controlType is false
    Mux16(a=instruction, b=outAlu, sel=controlType, out=aMuxOut);
    // Select input for ALU second operand 
    Mux16(a=aRegOut, b=inM, sel=controlAOrM, out=yIn);
    // Check if register A should be used
    Not(in=controlType, out=notCType);
    Or(a=notCType, b=controlDestinationA, out=loadA);

    // Loads selected value into A register, generates addressM
    ARegister(in=aMuxOut, load=loadA, out=aRegOut, out[0..14]=addressM);
    // Loads ALU output into register D
    DRegister(in=outAlu, load=controlDestinationD, out=xIn);

    // Jump logic
    // Check if jump should occur when result is 0
    And(a=controlJEQ, b=isZero, out=JEQ);
    // Check if jump should occur when result is negative
    And(a=controlJLT, b=isNegative, out=JLT);
    // Check if jump should occur when result is positive
    And(a=controlJGT, b=isPositive, out=JGT);
    // Is JLE valid
    Or(a=JEQ, b=JLT, out=JLE);
    // Pick final jump condition
    Or(a=JLE, b=JGT, out=jump);
    // Update program counter
    PC(in=aRegOut, load=jump, inc=true, reset=reset, out[0..14]=pc, out[15]=false);
}